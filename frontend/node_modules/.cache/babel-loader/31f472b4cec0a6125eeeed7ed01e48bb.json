{"ast":null,"code":"import _slicedToArray from \"/home/gisele/Documentos/curso/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gisele/Documentos/curso/frontend/src/pages/Dashboard/index.js\";\n//Criação de um componente react\n//useEffect = carrega uma informação assim que o componente é exibido em tela\nimport React, { useEffect, useState } from 'react'; //Serve para criar links que quando o usuário clica ele vai para outra rota\n\nimport { Link } from 'react-router-dom';\nimport socketio from 'socket.io-client';\nimport api from '../../services/api';\nimport './styles.css';\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        spots = _useState2[0],\n        setSpots = _useState2[1]; //Os spots vem da api em formato de array\n\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        requests = _useState4[0],\n        setRequests = _useState4[1]; //Conectando com o back, na conecxão eu passo tbm meu usuário\n\n\n  useEffect(() => {\n    const user_id = localStorage.getItem('user');\n    const socket = socketio('http://localhost:3333', {\n      query: {\n        user_id\n      }\n    }); //Endereço do backend\n    //Intercpitando as msg vindas do backend arquivo server.js com o sockeio\n    //As mensagens vindas do back com o nome message atribui a variavel data e imprima no console\n    // socket.on('message', data => {\n    //     console.log(data);\n    // })\n    //eu vou ouvir o booking_request (que vem do backend configurado no arquivo bookingController)\n    //eu vou pegar todos esse dados de booking-request atribuir a variavel data\n\n    socket.on('booking_request', data => {\n      console.log(data);\n    });\n  }, []);\n  useEffect(() => {\n    async function loadSpots() {\n      const user_id = localStorage.getItem('user');\n      const response = await api.get('/dashboard', {\n        headers: {\n          user_id\n        }\n      });\n      setSpots(response.data);\n    }\n\n    loadSpots();\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    className: \"notifications\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, requests.map(request => React.createElement(\"li\", {\n    key: request._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \" \", request.user.email, \" \"), \"est\\xE1 solicitando uma reserva em\", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \" \", request.spot.company, \" \"), \"para a data:\", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \" \", request.date, \" \"))))), React.createElement(\"ul\", {\n    className: \"spot-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, spots.map(spot => React.createElement(\"li\", {\n    key: spot._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    style: {\n      backgroundImage: \"url(\".concat(spot.thumbnail_url, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \" \", spot.company, \"  \"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \" \", spot.price ? \"R$\".concat(spot.price, \"/dia\") : 'GRATUITO', \" \")))), React.createElement(Link, {\n    to: \"/new\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Cadastrar novo spot\")));\n} //spots.map - vou percorrer minha lista de spots utilizando o map, e para cada um desses spots eu \n//retorno um HTML\n//response.data - informação que vai precisar ser manipulada pelo componente vamos armazenar essa listagem\n//dos spots dentro de um estado\n//useEffect ele é basicamente uma função que recebe dois parametros:\n//1 - é uma função, podemos escreve no formato aero function\n//2 - array de dependencia, ou seja quando queremos que essa função execute... esse array podem ter várias\n//variaveis que quando sofrem alguma alteração a função de dentro será executada \n//neste exemplo não temos nenhuma dependencia quero que a função seja executada apenas uma vez","map":{"version":3,"sources":["/home/gisele/Documentos/curso/frontend/src/pages/Dashboard/index.js"],"names":["React","useEffect","useState","Link","socketio","api","Dashboard","spots","setSpots","requests","setRequests","user_id","localStorage","getItem","socket","query","on","data","console","log","loadSpots","response","get","headers","map","request","_id","user","email","spot","company","date","backgroundImage","thumbnail_url","price"],"mappings":"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","sourcesContent":["//Criação de um componente react\n//useEffect = carrega uma informação assim que o componente é exibido em tela\nimport React, { useEffect, useState } from 'react';\n\n//Serve para criar links que quando o usuário clica ele vai para outra rota\nimport { Link } from 'react-router-dom';\n\nimport socketio from 'socket.io-client';\n\nimport api from '../../services/api';\n\nimport './styles.css';\n\n\nexport default function Dashboard(){\n    const [spots, setSpots] = useState([]); //Os spots vem da api em formato de array\n    const [requests, setRequests] = useState([]);\n\n    //Conectando com o back, na conecxão eu passo tbm meu usuário\n    useEffect(() => {\n        const user_id = localStorage.getItem('user');\n        const socket = socketio('http://localhost:3333', {\n            query: { user_id },\n        }); //Endereço do backend\n\n        //Intercpitando as msg vindas do backend arquivo server.js com o sockeio\n        //As mensagens vindas do back com o nome message atribui a variavel data e imprima no console\n        // socket.on('message', data => {\n        //     console.log(data);\n        // })\n\n\n        //eu vou ouvir o booking_request (que vem do backend configurado no arquivo bookingController)\n        //eu vou pegar todos esse dados de booking-request atribuir a variavel data\n        socket.on('booking_request', data => {\n            console.log(data);\n        });    \n\n\n    }, []);\n\n    useEffect(() => {\n        async function loadSpots(){\n            const user_id = localStorage.getItem('user');\n            const response = await api.get('/dashboard', {\n                headers: { user_id }\n            });\n\n            setSpots(response.data);\n        }\n        \n        loadSpots();\n    }, []);\n    \n    return (\n        <>\n            <ul className=\"notifications\">\n                {requests.map(request => (\n                    <li key={request._id}>\n                        <p>\n                            <strong> {request.user.email} </strong> \n                            está solicitando uma reserva em \n                            <strong> {request.spot.company} </strong> \n                            para a data: \n                            <strong> {request.date} </strong>\n                        </p>\n                    </li>\n                ))}\n            </ul>\n\n            <ul className=\"spot-list\">\n                {spots.map(spot =>(\n                    <li key={spot._id}>\n                        <header style={{ backgroundImage: `url(${spot.thumbnail_url})` }} />\n                        <strong> {spot.company}  </strong>  \n                        <span> {spot.price ? `R$${spot.price}/dia` : 'GRATUITO'} </span>                        \n                    </li>\n                ))}\n            </ul>\n\n            <Link to=\"/new\">\n                <button className=\"btn\">\n                    Cadastrar novo spot\n                </button>\n            </Link>\n        </>\n    );\n        \n}\n//spots.map - vou percorrer minha lista de spots utilizando o map, e para cada um desses spots eu \n//retorno um HTML\n\n\n//response.data - informação que vai precisar ser manipulada pelo componente vamos armazenar essa listagem\n//dos spots dentro de um estado\n\n//useEffect ele é basicamente uma função que recebe dois parametros:\n//1 - é uma função, podemos escreve no formato aero function\n//2 - array de dependencia, ou seja quando queremos que essa função execute... esse array podem ter várias\n//variaveis que quando sofrem alguma alteração a função de dentro será executada \n//neste exemplo não temos nenhuma dependencia quero que a função seja executada apenas uma vez"]},"metadata":{},"sourceType":"module"}