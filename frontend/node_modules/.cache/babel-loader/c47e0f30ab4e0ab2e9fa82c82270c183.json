{"ast":null,"code":"import _slicedToArray from \"/home/gisele/Documentos/curso/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gisele/Documentos/curso/frontend/src/pages/New/index.js\";\n//Criação de um componente react\n//useMemo - ele observa o valor de uma outra variavel e toda vez que ela alterar ele gera um novo valor\n//para a variavel\nimport React, { useState, useMemo } from 'react';\nimport api from '../../services/api'; //Importar um icone de camera\n\nimport camera from \"../../assets/photo-camera.svg\";\nimport './styles.css';\nexport default function New({\n  history\n}) {\n  //Precisamos criar um preview a partir dessa imagem\n  //Toda vez que essa variavel atualizar eu quero gerar uma preview dela\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        thumbnail = _useState2[0],\n        setThumbnail = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        company = _useState4[0],\n        setCompany = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        techs = _useState6[0],\n        setTechs = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        price = _useState8[0],\n        setPrice = _useState8[1]; //Toda vez que alteramos um estado do react ele executa a nossa função de novo o componente é \n  //totalmente remontado de novo, toda vez que os preços são atualizado as tecnologias atualizadas\n  //o componente é gerado do zero \n  //1 parametro uma função\n  //2 é um array de quando ele deve executar, quais variaveis quando alteradas faram ele executar\n\n\n  const preview = useMemo( //Se existir alguma coisa na thumbnail \n  //URL variavel global do HTML \n  //createObjectURL - Cria uma url para uma variavel temporaria  que ainda não foi feita upload e \n  //passo thumbnail como parametro     \n  () => {\n    return thumbnail ? URL.createObjectURL(thumbnail) : null;\n  }, [thumbnail]); //Cria um spot, mas aqui não mandamos as informações em formato de json e sim multipart pois existem arquivos\n\n  async function handleSubmit(event) {\n    event.preventDefault(); //Envia o conteúdo de requisição em formato multipartForm\n\n    const data = new FormData();\n    const user_id = localStorage.getItem('user'); //append - adiciona uma informação dentro desse meu objeto\n\n    data.append('thumbnail', thumbnail);\n    data.append('company', company);\n    data.append('techs', techs);\n    data.append('price', price); //Cria o spot\n\n    await api.post('/spots', data, {\n      headers: {\n        user_id\n      }\n    }); //Envia para a rota dashboard\n\n    history.push('/dashboard');\n  }\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    id: \"thumbnail\",\n    style: {\n      backgroundImage: \"url(\".concat(preview, \")\")\n    },\n    className: thumbnail ? 'has-thumbnail' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    onChange: event => setThumbnail(event.target.files[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: camera,\n    id: \"icone\",\n    alt: \"Select img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"company\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \" EMPRESA * \"), React.createElement(\"input\", {\n    id: \"company\",\n    placeholder: \"Sua empresa incr\\xEDvel\",\n    value: company,\n    onChange: event => setCompany(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"techs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \" TECNOLOGIAS * \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"(separadas por v\\xEDrgulas)\")), React.createElement(\"input\", {\n    id: \"techs\",\n    placeholder: \"Quais tecnologias usam?\",\n    value: techs,\n    onChange: event => setTechs(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"techs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \" VALOR DA DI\\xC1RIA * \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"(em branco para gratuito)\")), React.createElement(\"input\", {\n    id: \"price\",\n    placeholder: \"Valor cobrado por dia?\",\n    value: price,\n    onChange: event => setPrice(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \" Cadastrar \"));\n}","map":{"version":3,"sources":["/home/gisele/Documentos/curso/frontend/src/pages/New/index.js"],"names":["React","useState","useMemo","api","New","history","thumbnail","setThumbnail","company","setCompany","techs","setTechs","price","setPrice","preview","URL","createObjectURL","handleSubmit","event","preventDefault","data","FormData","user_id","localStorage","getItem","append","post","headers","push","backgroundImage","target","files","camera","value"],"mappings":"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","sourcesContent":["//Criação de um componente react\n//useMemo - ele observa o valor de uma outra variavel e toda vez que ela alterar ele gera um novo valor\n//para a variavel\nimport React, { useState, useMemo } from 'react';\nimport api from '../../services/api';\n\n//Importar um icone de camera\nimport camera from '../../assets/photo-camera.svg';\n\nimport './styles.css';\n\nexport default function New({ history }){\n    //Precisamos criar um preview a partir dessa imagem\n    //Toda vez que essa variavel atualizar eu quero gerar uma preview dela\n    const [thumbnail, setThumbnail] = useState(null);\n\n    const [company, setCompany] = useState('');\n    const [techs, setTechs] = useState('');\n    const [price, setPrice] = useState('');\n\n    //Toda vez que alteramos um estado do react ele executa a nossa função de novo o componente é \n    //totalmente remontado de novo, toda vez que os preços são atualizado as tecnologias atualizadas\n    //o componente é gerado do zero \n\n    //1 parametro uma função\n    //2 é um array de quando ele deve executar, quais variaveis quando alteradas faram ele executar\n    const preview = useMemo(\n        //Se existir alguma coisa na thumbnail \n        //URL variavel global do HTML \n        //createObjectURL - Cria uma url para uma variavel temporaria  que ainda não foi feita upload e \n        //passo thumbnail como parametro     \n        () => { return thumbnail ? URL.createObjectURL(thumbnail) : null },\n        [thumbnail]\n    );\n\n    //Cria um spot, mas aqui não mandamos as informações em formato de json e sim multipart pois existem arquivos\n    async function handleSubmit(event){\n        event.preventDefault();\n        \n        //Envia o conteúdo de requisição em formato multipartForm\n        const data = new FormData();\n        const user_id = localStorage.getItem('user');\n\n        //append - adiciona uma informação dentro desse meu objeto\n        data.append('thumbnail', thumbnail);\n        data.append('company', company);\n        data.append('techs', techs);\n        data.append('price', price);\n\n        //Cria o spot\n        await api.post('/spots', data, {\n            headers: { user_id }\n        });\n\n        //Envia para a rota dashboard\n        history.push('/dashboard');\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label id=\"thumbnail\" \n                style={{ backgroundImage: `url(${preview})` }}\n                className={thumbnail ? 'has-thumbnail' : ''}    \n            >\n\n                <input type=\"file\" onChange={event => setThumbnail(event.target.files[0])}/>\n                <img src={camera} id=\"icone\" alt=\"Select img\" />\n\n            </label>\n\n            <label htmlFor=\"company\"> EMPRESA * </label>\n            <input \n                id=\"company\" \n                placeholder=\"Sua empresa incrível\"\n                value={company}\n                onChange={event => setCompany(event.target.value)}\n            />\n\n            <label htmlFor=\"techs\"> TECNOLOGIAS * <span>(separadas por vírgulas)</span></label>\n            <input \n                id=\"techs\" \n                placeholder=\"Quais tecnologias usam?\"\n                value={techs}\n                onChange={event => setTechs(event.target.value)}\n            />\n\n            <label htmlFor=\"techs\"> VALOR DA DIÁRIA * <span>(em branco para gratuito)</span></label>\n            <input \n                id=\"price\" \n                placeholder=\"Valor cobrado por dia?\"\n                value={price}\n                onChange={event => setPrice(event.target.value)}\n            />\n\n            <button type=\"submit\" className=\"btn\"> Cadastrar </button>\n\n        </form>\n    );\n}"]},"metadata":{},"sourceType":"module"}